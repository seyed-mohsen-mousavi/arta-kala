import type { Metadata } from "next";
import "@/styles/globals.css";
import Navbar from "@/components/Navbar";
import { GetShopCategoriesTreeList } from "@/services/shopActions";
// import Providers from "./providers";
import localFont from "next/font/local";
import Providers from "./providers";
import { UserProvider } from "@/context/UserContext";
import { GetUserDashboard } from "@/services/usersActions";
import { cookies } from "next/headers";
import { AuthModalProvider } from "@/context/AuthModalProvider";
import AuthModal from "@/components/AuthModal";
import { CategoriesProvider } from "@/context/CategoriesContext";

const iranyekan = localFont({
  variable: "--font-iranyekan",
  src: [
    {
      path: "fonts/iranyekanweblight.woff2",
      weight: "100",
      style: "normal",
    },
    {
      path: "fonts/iranyekanwebregular.woff2",
      weight: "400",
      style: "normal",
    },
    {
      path: "fonts/iranyekanwebbold.woff2",
      weight: "700",
      style: "normal",
    },
    {
      path: "fonts/iranyekanwebbold.woff2",
      weight: "900",
      style: "normal",
    },
  ],
});

const pelak = localFont({
  variable: "--font-pelak",
  src: [
    {
      path: "fonts/Pelak-Regular.woff2",
      weight: "400",
      style: "normal",
    },
    {
      path: "fonts/Pelak-Bold.woff2",
      weight: "700",
      style: "normal",
    },
  ],
});

const noora = localFont({
  variable: "--font-noora",
  src: [
    {
      path: "fonts/Noora Fa-En 03 Regular.woff2",
      weight: "400",
      style: "normal",
    },
  ],
});

const dana = localFont({
  variable: "--font-dana",
  src: [
    {
      path: "fonts/dana-fanum-regular.woff2",
      weight: "400",
      style: "normal",
    },
  ],
});
export const metadata: Metadata = {
  title: "تکنو صاف",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const result = await GetShopCategoriesTreeList();
  let user = null;
  console.log("result:" + result);
  const cookieStore = await cookies();
  const cookieHeader = cookieStore.toString();
  if (cookieHeader.includes("access_token")) {
    user = await GetUserDashboard(cookieHeader);
  }
  // user = await GetUserDashboard();

  return (
    <html lang="fa-IR" dir="rtl" className="scroll-smooth bg-[#f9f9f9]">
      <body
        className={`${iranyekan.variable} ${pelak.variable} ${noora.variable} ${dana.variable} ${iranyekan.className} w-full min-h-screen relative antialiased text-[#212529]`}
      >
        <UserProvider initialUser={user}>
          <AuthModalProvider>
            <AuthModal />

            <CategoriesProvider categories={result?.data}>
              <Navbar />
              <Providers>
                <main className="container customSm:max-w-[566px]  w-full mx-auto pb-20 px-2 lg:px-0 h-full">
                  {children}
                </main>
              </Providers>
            </CategoriesProvider>
          </AuthModalProvider>
        </UserProvider>
      </body>
    </html>
  );
}
